<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metaprogramming on Tom&#39;s code blog</title>
    <link>/tags/metaprogramming/</link>
    <description>Recent content in Metaprogramming on Tom&#39;s code blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/metaprogramming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>fun with map ( expr ) %&gt;% reduce </title>
      <link>/2019/01/27/metaprogramming-with-map-quo-reduce/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/01/27/metaprogramming-with-map-quo-reduce/</guid>
      <description>Ever since I discovered the rlang function ‘expr’ I have become mildy obsessed with the idea of writing code which writes code. This will be the first of probably many posts where I experiment with combining either iteration or recursion with non-standard evaluation. However, before launching into anything genuinely useful, some background is required:
R is an ‘eagerly evaluated’ language, which means if you write:
a &amp;lt;- 50 and then just write a and hit enter you get:</description>
    </item>
    
  </channel>
</rss>